// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  description, create_timestamp
) VALUES (
  ?, ?
)
RETURNING id, description, create_timestamp, completed_timestamp, due_date_timestamp
`

type CreateTaskParams struct {
	Description     string
	CreateTimestamp time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Description, arg.CreateTimestamp)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.CreateTimestamp,
		&i.CompletedTimestamp,
		&i.DueDateTimestamp,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :one
DELETE FROM tasks
WHERE id = ?
RETURNING description
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteTask, id)
	var description string
	err := row.Scan(&description)
	return description, err
}

const getTask = `-- name: GetTask :one
SELECT id, description, create_timestamp, completed_timestamp, due_date_timestamp FROM tasks
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.CreateTimestamp,
		&i.CompletedTimestamp,
		&i.DueDateTimestamp,
	)
	return i, err
}

const listAllTasks = `-- name: ListAllTasks :many
SELECT id, description, create_timestamp, completed_timestamp, due_date_timestamp FROM tasks
ORDER BY id
`

func (q *Queries) ListAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.CreateTimestamp,
			&i.CompletedTimestamp,
			&i.DueDateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUncompletedTasks = `-- name: ListUncompletedTasks :many
SELECT id, description, create_timestamp, completed_timestamp, due_date_timestamp FROM tasks
WHERE completed_timestamp IS NULL
ORDER BY id
`

func (q *Queries) ListUncompletedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listUncompletedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.CreateTimestamp,
			&i.CompletedTimestamp,
			&i.DueDateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComplete = `-- name: UpdateComplete :one
UPDATE tasks
set completed_timestamp = ?
WHERE id = ?
RETURNING description
`

type UpdateCompleteParams struct {
	CompletedTimestamp sql.NullTime
	ID                 int64
}

func (q *Queries) UpdateComplete(ctx context.Context, arg UpdateCompleteParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateComplete, arg.CompletedTimestamp, arg.ID)
	var description string
	err := row.Scan(&description)
	return description, err
}
